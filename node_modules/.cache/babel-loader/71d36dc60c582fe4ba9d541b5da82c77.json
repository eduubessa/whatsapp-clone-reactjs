{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GiphyFetch = void 0;\n/* eslint-disable no-dupe-class-members */\n\nvar cookie_1 = __importDefault(require(\"cookie\"));\n\nvar qs_1 = __importDefault(require(\"qs\"));\n\nvar gif_1 = require(\"./normalize/gif\");\n\nvar request_1 = __importDefault(require(\"./request\"));\n\nvar getType = function (options) {\n  return options && options.type ? options.type : 'gifs';\n};\n/**\n * @class GiphyFetch\n * @param {string} apiKey\n */\n\n\nvar GiphyFetch =\n/** @class */\nfunction () {\n  function GiphyFetch(apiKey) {\n    var _this = this;\n    /**\n     * @hidden\n     */\n\n\n    this.getQS = function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var pingback_id = (typeof document !== 'undefined' ? cookie_1.default.parse(document.cookie) : {}).giphy_pbid;\n      return qs_1.default.stringify(__assign(__assign({}, options), {\n        api_key: _this.apiKey,\n        pingback_id: pingback_id\n      }));\n    };\n\n    this.apiKey = apiKey;\n  }\n  /**\n   * A list of categories\n   *\n   * @param {CategoriesOptions} [options]\n   * @returns {Promise<CategoriesResult>}\n   */\n\n\n  GiphyFetch.prototype.categories = function (options) {\n    return request_1.default(\"gifs/categories?\" + this.getQS(options));\n  };\n  /**\n   * Get a single gif by a id\n   * @param {string} id\n   * @returns {Promise<GifsResult>}\n   **/\n\n\n  GiphyFetch.prototype.gif = function (id) {\n    return request_1.default(\"gifs/\" + id + \"?\" + this.getQS(), gif_1.normalizeGif);\n  };\n\n  GiphyFetch.prototype.gifs = function (arg1, arg2) {\n    if (Array.isArray(arg1)) {\n      return request_1.default(\"gifs?\" + this.getQS({\n        ids: arg1.join(',')\n      }), gif_1.normalizeGifs);\n    }\n\n    return request_1.default(\"gifs/categories/\" + arg1 + \"/\" + arg2 + \"?\" + this.getQS(), gif_1.normalizeGifs);\n  };\n\n  GiphyFetch.prototype.emoji = function (options) {\n    return request_1.default(\"emoji?\" + this.getQS(options), gif_1.normalizeGifs, 'EMOJI');\n  };\n  /**\n   * @param term: string The term you're searching for\n   * @param options: SearchOptions\n   * @returns {Promise<GifsResult>}\n   **/\n\n\n  GiphyFetch.prototype.search = function (term, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var q = options.channel ? \"@\" + options.channel + \" \" + term : term;\n    var qsParams = this.getQS(__assign(__assign({}, options), {\n      q: q\n    }));\n    var pingbackType = options.type === 'text' ? 'TEXT_SEARCH' : options.explore ? 'GIF_EXPLORE' : 'GIF_SEARCH';\n    return request_1.default(getType(options) + \"/search?\" + qsParams, gif_1.normalizeGifs, pingbackType);\n  };\n  /**\n   * Get a list of subcategories\n   * @param {string} category\n   * @param {SubcategoriesOptions} options\n   * @returns {Promise<CategoriesResult>}\n   */\n\n\n  GiphyFetch.prototype.subcategories = function (category, options) {\n    return request_1.default(\"gifs/categories/\" + category + \"?\" + this.getQS(options));\n  };\n  /**\n   * Get trending gifs\n   *\n   * @param {TrendingOptions} options\n   * @returns {Promise<GifsResult>}\n   */\n\n\n  GiphyFetch.prototype.trending = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var pingbackType = options.type === 'text' ? 'TEXT_TRENDING' : 'GIF_TRENDING';\n    return request_1.default(getType(options) + \"/trending?\" + this.getQS(options), gif_1.normalizeGifs, pingbackType);\n  };\n  /**\n   * Get a random gif\n   * @param {RandomOptions}\n   * @returns {Promise<GifResult>}\n   **/\n\n\n  GiphyFetch.prototype.random = function (options) {\n    return request_1.default(getType(options) + \"/random?\" + this.getQS(options), gif_1.normalizeGif, undefined, true);\n  };\n  /**\n   * Get related gifs by a id\n   * @param {string} id\n   * @param {SubcategoriesOptions} options\n   * @returns {Promise<GifsResult>}\n   **/\n\n\n  GiphyFetch.prototype.related = function (id, options) {\n    return request_1.default(\"gifs/related?\" + this.getQS(__assign({\n      gif_id: id\n    }, options)), gif_1.normalizeGifs, 'GIF_RELATED');\n  };\n\n  return GiphyFetch;\n}();\n\nexports.GiphyFetch = GiphyFetch;\nexports.default = GiphyFetch;","map":{"version":3,"sources":["../src/api.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GiphyFetch = void 0;\n/* eslint-disable no-dupe-class-members */\nvar cookie_1 = __importDefault(require(\"cookie\"));\nvar qs_1 = __importDefault(require(\"qs\"));\nvar gif_1 = require(\"./normalize/gif\");\nvar request_1 = __importDefault(require(\"./request\"));\nvar getType = function (options) { return (options && options.type ? options.type : 'gifs'); };\n/**\n * @class GiphyFetch\n * @param {string} apiKey\n */\nvar GiphyFetch = /** @class */ (function () {\n    function GiphyFetch(apiKey) {\n        var _this = this;\n        /**\n         * @hidden\n         */\n        this.getQS = function (options) {\n            if (options === void 0) { options = {}; }\n            var pingback_id = (typeof document !== 'undefined' ? cookie_1.default.parse(document.cookie) : {}).giphy_pbid;\n            return qs_1.default.stringify(__assign(__assign({}, options), { api_key: _this.apiKey, pingback_id: pingback_id }));\n        };\n        this.apiKey = apiKey;\n    }\n    /**\n     * A list of categories\n     *\n     * @param {CategoriesOptions} [options]\n     * @returns {Promise<CategoriesResult>}\n     */\n    GiphyFetch.prototype.categories = function (options) {\n        return request_1.default(\"gifs/categories?\" + this.getQS(options));\n    };\n    /**\n     * Get a single gif by a id\n     * @param {string} id\n     * @returns {Promise<GifsResult>}\n     **/\n    GiphyFetch.prototype.gif = function (id) {\n        return request_1.default(\"gifs/\" + id + \"?\" + this.getQS(), gif_1.normalizeGif);\n    };\n    GiphyFetch.prototype.gifs = function (arg1, arg2) {\n        if (Array.isArray(arg1)) {\n            return request_1.default(\"gifs?\" + this.getQS({ ids: arg1.join(',') }), gif_1.normalizeGifs);\n        }\n        return request_1.default(\"gifs/categories/\" + arg1 + \"/\" + arg2 + \"?\" + this.getQS(), gif_1.normalizeGifs);\n    };\n    GiphyFetch.prototype.emoji = function (options) {\n        return request_1.default(\"emoji?\" + this.getQS(options), gif_1.normalizeGifs, 'EMOJI');\n    };\n    /**\n     * @param term: string The term you're searching for\n     * @param options: SearchOptions\n     * @returns {Promise<GifsResult>}\n     **/\n    GiphyFetch.prototype.search = function (term, options) {\n        if (options === void 0) { options = {}; }\n        var q = options.channel ? \"@\" + options.channel + \" \" + term : term;\n        var qsParams = this.getQS(__assign(__assign({}, options), { q: q }));\n        var pingbackType = options.type === 'text' ? 'TEXT_SEARCH' : options.explore ? 'GIF_EXPLORE' : 'GIF_SEARCH';\n        return request_1.default(getType(options) + \"/search?\" + qsParams, gif_1.normalizeGifs, pingbackType);\n    };\n    /**\n     * Get a list of subcategories\n     * @param {string} category\n     * @param {SubcategoriesOptions} options\n     * @returns {Promise<CategoriesResult>}\n     */\n    GiphyFetch.prototype.subcategories = function (category, options) {\n        return request_1.default(\"gifs/categories/\" + category + \"?\" + this.getQS(options));\n    };\n    /**\n     * Get trending gifs\n     *\n     * @param {TrendingOptions} options\n     * @returns {Promise<GifsResult>}\n     */\n    GiphyFetch.prototype.trending = function (options) {\n        if (options === void 0) { options = {}; }\n        var pingbackType = options.type === 'text' ? 'TEXT_TRENDING' : 'GIF_TRENDING';\n        return request_1.default(getType(options) + \"/trending?\" + this.getQS(options), gif_1.normalizeGifs, pingbackType);\n    };\n    /**\n     * Get a random gif\n     * @param {RandomOptions}\n     * @returns {Promise<GifResult>}\n     **/\n    GiphyFetch.prototype.random = function (options) {\n        return request_1.default(getType(options) + \"/random?\" + this.getQS(options), gif_1.normalizeGif, undefined, true);\n    };\n    /**\n     * Get related gifs by a id\n     * @param {string} id\n     * @param {SubcategoriesOptions} options\n     * @returns {Promise<GifsResult>}\n     **/\n    GiphyFetch.prototype.related = function (id, options) {\n        return request_1.default(\"gifs/related?\" + this.getQS(__assign({ gif_id: id }, options)), gif_1.normalizeGifs, 'GIF_RELATED');\n    };\n    return GiphyFetch;\n}());\nexports.GiphyFetch = GiphyFetch;\nexports.default = GiphyFetch;\n//# sourceMappingURL=api.js.map"]},"metadata":{},"sourceType":"script"}